		Raspberry Pi i2c Display HOWTO
	Alexander Smirnov <alllecs@yandex.ru>
			26/08/2015

1. Об этом руководстве

Это руководство описывает подключение
lcd дисплея 20х4 по i2c
к raspberry pi.

2. 
Перейдите в файл
sudo nano /etc/modules

Добавьте 2 строки:

	i2c-bcm2708 
	i2c-dev

Перезапустите raspberry pi командой:

	sudo reboot

3. Установка пакетов
Для установки дополнительных пакетов
выполните команду:

	sudo apt-get install python-smbus i2c-tools

4. Закомментируйте строку
Перейдите в файл командой

	sudo nano /etc/modprobe.d/raspi-blacklist.conf

Найдите строку

	blacklist i2c-bcm2708

Закомментируйте эту строку

	#blacklist i2c-bcm2708

Для применения изменений перезапустите raspberry

	sudo reboot

5. Тестирование работы i2c
Проверить список подключенных устройств
можно командой:

	sudo i2cdetect -y 0 (for Rev 1)
или
	sudo i2cdetect -y 1 (for Rev 2)

 – display with address #27

6. Создание файлов python
Создайте файл i2c_lib.py

	cd
	mkdir display_420
	sudo nano i2c_lib.py

Добавьте в файл строки:

import smbus
from time import *

class i2c_device:
   def __init__(self, addr, port=1):
      self.addr = addr
      self.bus = smbus.SMBus(port)

# Write a single command
   def write_cmd(self, cmd):
      self.bus.write_byte(self.addr, cmd)
      sleep(0.0001)

# Write a command and argument
   def write_cmd_arg(self, cmd, data):
      self.bus.write_byte_data(self.addr, cmd, data)
      sleep(0.0001)

# Write a block of data
   def write_block_data(self, cmd, data):
      self.bus.write_block_data(self.addr, cmd, data)
      sleep(0.0001)

# Read a single byte
   def read(self):
      return self.bus.read_byte(self.addr)

# Read
   def read_data(self, cmd):
      return self.bus.read_byte_data(self.addr, cmd)

# Read a block of data
   def read_block_data(self, cmd):
      return self.bus.read_block_data(self.addr, cmd)


Создайте еще один файл lcddriver.py

	sudo nano lcddriver.py

Добавьте в него строки:

import i2c_lib
from time import *

# LCD Address
ADDRESS = 0x27

# commands
LCD_CLEARDISPLAY = 0x01
LCD_RETURNHOME = 0x02
LCD_ENTRYMODESET = 0x04
LCD_DISPLAYCONTROL = 0x08
LCD_CURSORSHIFT = 0x10
LCD_FUNCTIONSET = 0x20
LCD_SETCGRAMADDR = 0x40
LCD_SETDDRAMADDR = 0x80

# flags for display entry mode
LCD_ENTRYRIGHT = 0x00
LCD_ENTRYLEFT = 0x02
LCD_ENTRYSHIFTINCREMENT = 0x01
LCD_ENTRYSHIFTDECREMENT = 0x00

# flags for display on/off control
LCD_DISPLAYON = 0x04
LCD_DISPLAYOFF = 0x00
LCD_CURSORON = 0x02
LCD_CURSOROFF = 0x00
LCD_BLINKON = 0x01
LCD_BLINKOFF = 0x00

# flags for display/cursor shift
LCD_DISPLAYMOVE = 0x08
LCD_CURSORMOVE = 0x00
LCD_MOVERIGHT = 0x04
LCD_MOVELEFT = 0x00

# flags for function set
LCD_8BITMODE = 0x10
LCD_4BITMODE = 0x00
LCD_2LINE = 0x08
LCD_1LINE = 0x00
LCD_5x10DOTS = 0x04
LCD_5x8DOTS = 0x00

# flags for backlight control
LCD_BACKLIGHT = 0x08
LCD_NOBACKLIGHT = 0x00

En = 0b00000100 # Enable bit
Rw = 0b00000010 # Read/Write bit
Rs = 0b00000001 # Register select bit

class lcd:
   #initializes objects and lcd
   def __init__(self):
      self.lcd_device = i2c_lib.i2c_device(ADDRESS)

      self.lcd_write(0x03)
      self.lcd_write(0x03)
      self.lcd_write(0x03)
      self.lcd_write(0x02)

      self.lcd_write(LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS | LCD_4BITMODE)
      self.lcd_write(LCD_DISPLAYCONTROL | LCD_DISPLAYON)
      self.lcd_write(LCD_CLEARDISPLAY)
      self.lcd_write(LCD_ENTRYMODESET | LCD_ENTRYLEFT)
      sleep(0.2)

   # clocks EN to latch command
   def lcd_strobe(self, data):
      self.lcd_device.write_cmd(data | En | LCD_BACKLIGHT)
      sleep(.0005)
      self.lcd_device.write_cmd(((data & ~En) | LCD_BACKLIGHT))
      sleep(.0001)

   def lcd_write_four_bits(self, data):
      self.lcd_device.write_cmd(data | LCD_BACKLIGHT)
      self.lcd_strobe(data)

   # write a command to lcd
   def lcd_write(self, cmd, mode=0):
      self.lcd_write_four_bits(mode | (cmd & 0xF0))
      self.lcd_write_four_bits(mode | ((cmd << 4) & 0xF0))

   # put string function
   def lcd_display_string(self, string, line):
      if line == 1:
         self.lcd_write(0x80)
      if line == 2:
         self.lcd_write(0xC0)
      if line == 3:
         self.lcd_write(0x94)
      if line == 4:
         self.lcd_write(0xD4)

      for char in string:
         self.lcd_write(ord(char), Rs)

   # clear lcd and set to home
   def lcd_clear(self):
      self.lcd_write(LCD_CLEARDISPLAY)
      self.lcd_write(LCD_RETURNHOME)

В файле lcddriver.py устанавливается адрес устройства в i2c.
В данном случае 0x27.

# LCD Address
ADDRESS = 0x27

7. Работа с дисплеем
Запустите python с помощью команды

	pyton

После чего наберите строки без комментариев:

# loading the class
import lcddriver
from time import *

# lcd start
lcd = lcddriver.lcd()

# this command clears the display (captain obvious)
lcd.lcd_clear()

# now we can display some characters (text, line)
lcd.lcd_display_string("   Hello world !", 1)
lcd.lcd_display_string("      I am", 2)
lcd.lcd_display_string("        a", 3)
lcd.lcd_display_string("   Raspberry Pi !", 4)

Для работы с реле, наберите строки:

#!/usr/bin/env python
import lcddriver
import socket
import fcntl
import struct
from time import *


def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', ifname[:15])
    )[20:24])

get_ip_address('lo')

get_ip_address('eth0')

lcd = lcddriver.lcd()

lcd.lcd_clear()
lcd.lcd_display_string("---------------------", 3)
lcd.lcd_display_string("IP: " + get_ip_address('eth0'), 4)

f1 = open('/sys/class/gpio/gpio5/value')
f2 = open('/sys/class/gpio/gpio6/value')
f3 = open('/sys/class/gpio/gpio13/value')
f4 = open('/sys/class/gpio/gpio19/value')

lcd.lcd_display_string("Relay 1: " + f1.readline(1) + " Relay 2:" + f2.readline(
1), 1)
lcd.lcd_display_string("Relay 3: " + f3.readline(1) + " Relay 4:" + f4.readline(
1), 2)
